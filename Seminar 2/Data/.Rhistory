library(MASS)
library(ggpubr)
library(dbplyr)
# Setting Working Directory
#setwd("/Den stora KTH mappen/CM2003 - Statistics in Medical Engineering/Seminar 2")      # Laptop
setwd("/Skola/KTH/CM2009 - Statistics in Medical Engineering/Seminarium/Seminar 2/Data")   # Desktop
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
# Setting Working Directory
#setwd("/Den stora KTH mappen/CM2003 - Statistics in Medical Engineering/Seminar 2")      # Laptop
setwd("/Skola/KTH/CM2009 - Statistics in Medical Engineering/Git/Seminar 2/Data")   # Desktop
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
attach (kvdata)
View(kvdata)
View(kvdata)
install.packages("splitstackshape")
library(splitstackshape)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
attach (kvdata)
View(kvdata)
View(kvdata)
# Setting Working Directory
#setwd("/Den stora KTH mappen/CM2003 - Statistics in Medical Engineering/Seminar 2")      # Laptop
setwd("/Skola/KTH/CM2009 - Statistics in Medical Engineering/Git/Seminar 2/Data")   # Desktop
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
attach (kvdata)
# Setting Working Directory
#setwd("/Den stora KTH mappen/CM2003 - Statistics in Medical Engineering/Seminar 2")      # Laptop
setwd("/Skola/KTH/CM2009 - Statistics in Medical Engineering/Git/Seminar 2/Data")   # Desktop
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
attach (kvdata)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=FALSE)
attach (kvdata)
View(kvdata)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=FALSE)
colnames(kvdata) <- c("kv","cnr")
View(kvdata)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
View(kvdata)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=FALSE)
kv1data =read.csv("kv.data.csv")
kv1data =read.csv("kvdata.csv")
View(kvdata)
kv1data =read.csv("kvdata.csv")
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
View(kv1data)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE, fill=TRUE)
View(kvdata)
# Reading in data and attaching the headers to corresponding column
vcdata = read.table("vcdata.txt", sep = ",")
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = "", header=TRUE)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
View(kvdata)
separate(file_name,
c("time", "kv","cnr"))
library(tidyr)
separate(file_name,
c("time", "kv","cnr"))
separate(kvdata,
c("time", "kv","cnr"))
View(kvdata)
separate(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = ",", header=TRUE, stringsAsFactors = FALSE)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.table("kvdata.csv",sep = "", header=TRUE, stringsAsFactors = FALSE)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.csv("kvdata.csv",sep = "", header=TRUE, stringsAsFactors = FALSE)
View(kvdata)
attach(kvdata)
time()
kv
kvdata
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.csv("kvdata.csv",sep = "\t", header=TRUE, stringsAsFactors = FALSE)
View(kvdata)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.csv("kvdata.csv",sep = "\t", header=TRUE)
View(kvdata)
# Reading in kvdata data and attaching the headers to corresponding column
x1 = read.csv(file = "kvdata.csv", head = TRUE, sep=",")
View(x1)
# Reading in kvdata data and attaching the headers to corresponding column
x1 = read.csv(file = "kvdata.csv", head = TRUE, sep="")
View(x1)
colnames = c("time","kv", "cnr")
names(kvdata) = myColNames
names(kvdata) = colnames
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.csv(file = "kvdata.csv", head = TRUE, sep="")
colnames = c("time","kv", "cnr")
names(kvdata) = colnames
View(kvdata)
attach(kvdata)
View(kvdata)
# Setting Working Directory
#setwd("/Den stora KTH mappen/CM2003 - Statistics in Medical Engineering/Seminar 2")      # Laptop
setwd("/Skola/KTH/CM2009 - Statistics in Medical Engineering/Git/Seminar 2/Data")   # Desktop
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.csv(file = "kvdata.csv", head = TRUE, sep="")
attach(kvdata)
View(kvdata)
# Gaussian
plot(kvdata,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability")
# Gaussian
plot(kv,cnr,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability")
summary(kvdata)
# Gaussian
plot(kv,cnr,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability"),
xlim = c(60,98)
# Gaussian
plot(kv,cnr,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability"),
xlim = c(60,98))
# Gaussian
plot(kv,cnr,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability",
xlim = c(60,98))
View(kvdata)
# Gaussian
plot(kv,cnr,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability",
xlim = c(1,20))
# Gaussian
plot(kv,cnr,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability",
xlim = c(1,20),ylim = c(1,20))
cnr = as.double(cnr)
cnr = as.numeric(cnr)
cnr = as.numeric(sub(",", ".", cnr, fixed = TRUE))
cnr = as.numeric(sub(",", ".", cnr))
cnr = as.numeric(gsub(",", ".", cnr))
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.csv(file = "kvdata.csv", head = TRUE, sep="")
attach(kvdata)
cnr = as.numeric(gsub(",", ".", cnr))
# --- Task 4 --- #
summary(kvdata)
# Gaussian
plot(kv,cnr,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability",
xlim = c(1,20),ylim = c(1,20))
kv
# Gaussian
plot(kv,cnr,type="p",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability",
xlim = c(1,20),ylim = c(1,20))
# Gaussian
plot(kv,cnr,type="p",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability")
# Gaussian
plot(kv,cnr,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "Count Rate",
ylab = "Probability")
# Gaussian
plot(kv,cnr,type="l",
main = "Cumulative Distributation - Gaussian",
xlab = "kV",
ylab = "CNR")
# Gaussian
plot(kv,cnr,type="l",
main = "CNR & kV plot",
xlab = "kV",
ylab = "CNR")
# Doing plotting of values to visualize
plot(kv,cnr,type="l",
main = "Contrast-to-Noise ratio as function of kV setting",
xlab = "kV",
ylab = "CNR")
View(kvdata)
View(kvdata)
fitidistr(kvdata)
# Fitting Poisson and Gaussian dist to countrate_data
normal = fitdistr(kvdata, "normal")
View(kvdata)
kvdata2 = data.frame(kv,cnr)
kvdata_new = data.frame(kv,cnr)
# Fitting Poisson and Gaussian dist to countrate_data
normal = fitdistr(kvdata_new, "normal")
# Reading in kvdata data and attaching the headers to corresponding column
kvdata = read.csv(file = "kvdata.csv", head = TRUE, sep="")
attach(kvdata)
# Checking the data of both vectors and turning the cnr vector into numerical
summary(kvdata)
cnr = as.numeric(gsub(",", ".", cnr))
# Creating a net data.frame to be able to use fitdistr function
kvdata_new = data.frame(kv,cnr)
# Doing plotting of values to visualize
plot(kv,cnr,type="l",
main = "Contrast-to-Noise ratio as function of kV setting",
xlab = "kV",
ylab = "CNR")
# Fitting Poisson and Gaussian dist to countrate_data
normal = fitdistr(kvdata_new, "normal")
summary(kvdata_new)
ggqqplot(kvdata_new)
# Creating a net data.frame to be able to use fitdistr function
x = x[1:20]
kvdata_new = data.frame(x,cnr)
# Creating a net data.frame to be able to use fitdistr function
x = 1:20
kvdata_new = data.frame(x,cnr)
summary(kvdata_new)
# Fitting Poisson and Gaussian dist to countrate_data
normal = fitdistr(kvdata_new, "normal")
View(kvdata_new)
View(kvdata_new)
# Fitting Poisson and Gaussian dist to countrate_data
normal = fitdistr(cnr, "normal")
View(normal)
norm = dnorm(kv, normal$estimate[1], normal$estimate[2])
plot(norm)
plot(normal)
View(normal)
View(normal)
ggqqplot(cnr)
plot(normal)
norm = dnorm(kv, normal$estimate[1], normal$estimate[2])
plot(norm)
# Creating variables needed for computing the 95 % confidence interval of the Gaussian distribution
norm1 = qnorm(0.975 ,normal$estimate[1], normal$estimate[2])
norm2 = qnorm(0.025 ,normal$estimate[1], normal$estimate[2])
# Printing estimates with a 95 % confidence interval
sprintf("Estimate of countrate w. Gaussian distribution is between: %f and %f", norm2, norm1)
norm = dnorm(kv, normal$estimate[1], normal$estimate[2])
# Figuring out limits to plot and plotting Gaussian distr.
summary(kv)
plot(norm, xlim = (60,98))
plot(norm, xlim = (60:98))
plot(norm, xlim = (60,98))
plot(norm, xlim = c(60,98))
x = 68:98
norm = dnorm(x, normal$estimate[1], normal$estimate[2])
# Figuring out limits to plot and plotting Gaussian distr.
summary(kv)
plot(norm, xlim = c(60,98))
plot(norm, type = "l" xlim = c(60,98))
# Creating variables needed for computing the 95 % confidence interval of the Gaussian distribution
norm1 = qnorm(0.975 ,normal$estimate[1], normal$estimate[2])
plot(norm, type = "l", xlim = c(60,98))
plot(norm, type = "l"
plot(norm, type = "l")
plot(norm, type = "l")
# Calculating the mean of the data
mean = mean(cnr)
# Printing these values
sprintf("Mean of countrate is: %s", cnr)
sprintf("Mean of Gaussian fit is: %s", normal$estimate[1])
# Printing these values
sprintf("Mean of countrate is: %s", cnr)
# Calculating the mean of the data
mean = mean(cnr)
# Printing these values
sprintf("Mean of countrate is: %s", mean)
sprintf("Mean of Gaussian fit is: %s", normal$estimate[1])
# Checking the data of both vectors and turning the cnr vector into numerical
summary(kvdata)
cnr = as.numeric(gsub(",", ".", cnr))
# Doing plotting of values to visualize
plot(kv,cnr,type="l",
main = "Contrast-to-Noise ratio as function of kV setting",
xlab = "kV",
ylab = "CNR")
# Doing plotting of values to visualize
plot(kv,cnr,type="l",
main = "Contrast-to-Noise ratio at different kV settings",
xlab = "kV",
ylab = "CNR")
